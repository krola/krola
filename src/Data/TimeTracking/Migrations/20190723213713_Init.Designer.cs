// <auto-generated />
using System;
using Krola.Data.TimeTracking;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Krola.Data.TimeTracking.Migrations
{
    [DbContext(typeof(TimeTrackingDbContext))]
    [Migration("20190723213713_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Krola.Domain.TimeTracking.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Krola.Domain.TimeTracking.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowWithNoTimesheet");

                    b.Property<DateTime>("Created");

                    b.Property<int>("DeviceId");

                    b.Property<bool>("Enabled");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Krola.Domain.TimeTracking.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<int>("DeviceId");

                    b.Property<DateTime?>("End");

                    b.Property<DateTime>("Modified");

                    b.Property<DateTime>("Star");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Krola.Domain.TimeTracking.Timesheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime?>("DateTo");

                    b.Property<TimeSpan>("HourFrom");

                    b.Property<TimeSpan>("HourTo");

                    b.Property<DateTime>("Modified");

                    b.Property<int>("ScheduleId");

                    b.Property<TimeSpan>("Time");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("Krola.Domain.TimeTracking.Schedule", b =>
                {
                    b.HasOne("Krola.Domain.TimeTracking.Device", "Device")
                        .WithMany("Schedules")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Krola.Domain.TimeTracking.Session", b =>
                {
                    b.HasOne("Krola.Domain.TimeTracking.Device", "Device")
                        .WithMany("Sessions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Krola.Domain.TimeTracking.Timesheet", b =>
                {
                    b.HasOne("Krola.Domain.TimeTracking.Schedule", "Schedule")
                        .WithMany("Timesheets")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
